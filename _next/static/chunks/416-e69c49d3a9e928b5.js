"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[416],{7100:function(e,t,n){n.r(t),n.d(t,{ActionProvider:function(){return a},useAction:function(){return s}});var o=n(3827),c=n(4090);let r=(0,c.createContext)(void 0);function a(e){let{children:t}=e,[n,a]=(0,c.useState)("none"),[i,s]=(0,c.useState)(null);return(0,o.jsx)(r.Provider,{value:{pendingAction:n,actionPayload:i,setPendingAction:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;a(e),s(t)},clearPendingAction:()=>{a("none"),s(null)}},children:t})}let i={pendingAction:"none",actionPayload:null,setPendingAction:()=>{},clearPendingAction:()=>{}};function s(){return(0,c.useContext)(r)||i}},4081:function(e,t,n){n.r(t),n.d(t,{ChatProvider:function(){return d},useChat:function(){return h}});var o=n(3827),c=n(4090),r=n(7907),a=n(6564),i=n(9359),s=n(4938);let l={_currentConnectionId:null,_activeEventSource:null,async sendMessage(e){console.log("[Chat API] Sending message to backend:",e),!e.connectionId&&this._currentConnectionId&&(console.log("[Chat API] Using stored connectionId:",this._currentConnectionId),e.connectionId=this._currentConnectionId);try{let t=await a.x.post("/api/v1/chat/message",e);if(console.log("[Chat API] Received response from backend:",t.data),404===t.status&&"error"===t.data.type&&"Connection not active"===t.data.content){if(console.warn("[Chat API] Connection no longer active, clearing stored connection"),this._currentConnectionId=null,this._activeEventSource){try{this._activeEventSource.close()}catch(e){console.error("[Chat API] Error closing stale event source:",e)}this._activeEventSource=null}return{type:"error",content:"Connection lost. Please try again.",connectionId:e.connectionId}}return t.data}catch(t){if(console.error("[Chat API] Error sending message to backend:",t),t.response&&404===t.response.status){if(console.warn("[Chat API] Connection no longer active (from error), clearing stored connection"),this._currentConnectionId=null,this._activeEventSource){try{this._activeEventSource.close()}catch(e){console.error("[Chat API] Error closing stale event source:",e)}this._activeEventSource=null}return{type:"error",content:"Connection lost. Please reconnect to continue chatting.",connectionId:e.connectionId}}return{type:"error",content:"Failed to send message. Please try again later.",connectionId:e.connectionId}}},async createChatStream(e){if(console.log("[Chat API] createChatStream called"),this._currentConnectionId&&this._activeEventSource)return console.log("[Chat API] REUSING existing connectionId (NO NETWORK REQUEST):",this._currentConnectionId),{eventSource:this._activeEventSource,connectionId:this._currentConnectionId};console.log("[Chat API] No valid existing connection, creating new SSE connection");let t=i.auth.currentUser;if(!t)throw console.error("[Chat API] No authenticated user found"),Error("User not authenticated");try{let n=await t.getIdToken();console.log("[Chat API] Successfully obtained Firebase token");let o=a.x.defaults.baseURL||"",c="".concat(o,"/api/v1/chat/stream");console.log("[Chat API] Connecting to SSE endpoint:",c);let r=new AbortController,i={close:()=>{console.log("[Chat API] Closing SSE connection"),r.abort()}};return this._activeEventSource=i,new Promise((t,o)=>{console.log("[Chat API] Setting up SSE connection with fetchEventSource...");let a=!1,u=setTimeout(()=>{a||(console.warn("[Chat API] Connection timeout reached without receiving connectionId"),a=!0,t({eventSource:i,connectionId:null}))},5e3);(0,s.L)(c,{method:"GET",headers:{Authorization:"Bearer ".concat(n),Accept:"text/event-stream","Cache-Control":"no-cache"},signal:r.signal,onopen(e){if(console.log("[Chat API] SSE connection opened with status:",e.status),console.log("[Chat API] Response headers:",{contentType:e.headers.get("Content-Type"),cacheControl:e.headers.get("Cache-Control"),connection:e.headers.get("Connection")}),e.ok)return console.log("[Chat API] SSE connection established successfully"),Promise.resolve();throw Error("Failed to establish SSE connection: ".concat(e.status," ").concat(e.statusText))},onmessage(n){if(!n.event&&(!n.data||n.data.trim().startsWith(":"))){console.log("[Chat API] Received heartbeat");return}if(console.log("[Chat API] Received SSE event:",n.event),console.log("[Chat API] Event data:",n.data),!n.data){console.log("[Chat API] Empty event data, skipping processing");return}try{let o=JSON.parse(n.data);"connected"===n.event&&o.connectionId&&!a&&(console.log("[Chat API] Connection established with ID:",o.connectionId),o.connectionId,l._currentConnectionId=o.connectionId,console.log("[Chat API] Resolving promise with connectionId:",o.connectionId),clearTimeout(u),a=!0,t({eventSource:i,connectionId:o.connectionId})),e&&"function"==typeof e&&e(n.event,o)}catch(e){console.error("[Chat API] Error parsing SSE event data:",e),console.log("[Chat API] Raw event data that failed to parse:",n.data)}},onerror(e){console.error("[Chat API] SSE connection error:",e),console.error("[Chat API] Error details:",{name:e.name,message:e.message,stack:e.stack}),console.log("[Chat API] Aborting fetch due to error"),r.abort(),a||(console.warn("[Chat API] Resolving with null connectionId due to error"),clearTimeout(u),a=!0,t({eventSource:i,connectionId:null})),l._currentConnectionId=null,l._activeEventSource=null},onclose(){console.log("[Chat API] SSE connection closed"),l._currentConnectionId=null,l._activeEventSource=null,a||(console.warn("[Chat API] Resolving with null connectionId due to connection close"),clearTimeout(u),a=!0,t({eventSource:i,connectionId:null}))},openWhenHidden:!0}).catch(e=>{console.error("[Chat API] Error in fetchEventSource:",e),a||(console.warn("[Chat API] Rejecting promise due to fetchEventSource error"),clearTimeout(u),a=!0,o(e))})})}catch(e){throw console.error("[Chat API] Error setting up SSE connection:",e),e}},async terminateChatStream(){if(console.log("[Chat API] Terminating chat stream"),this._currentConnectionId){let e=this._currentConnectionId;if(this._activeEventSource){try{console.log("[Chat API] Closing client-side SSE connection"),this._activeEventSource.close()}catch(e){console.error("[Chat API] Error closing event source:",e)}this._activeEventSource=null}try{console.log("[Chat API] Notifying server to terminate connection:",e),await a.x.delete("/api/v1/chat/connection/".concat(e)),console.log("[Chat API] Server successfully notified of connection termination")}catch(e){console.error("[Chat API] Error notifying server of connection termination:",e)}this._currentConnectionId=null}else console.log("[Chat API] No active connection to terminate")},closeSSEConnection(){if(console.log("[Chat API] Closing SSE connection"),this._activeEventSource){try{this._activeEventSource.close()}catch(e){console.error("[Chat API] Error closing event source:",e)}this._activeEventSource=null}}},u=(0,c.createContext)(null);function d(e){let{children:t,maxReconnectAttempts:n=5,animationDuration:a=300}=e,s=(0,i.useAuth)();if((0,r.useRouter)(),!s.user||!s.isActive)return(0,o.jsx)(o.Fragment,{children:t});let[d,h]=(0,c.useState)(null),[g,C]=(0,c.useState)(null),[v,m]=(0,c.useState)("disconnected"),[S,p]=(0,c.useState)(0),[f,I]=(0,c.useState)(!1),[E,P]=(0,c.useState)(null),[A,y]=(0,c.useState)([]),[w,b]=(0,c.useState)(null),[x,_]=(0,c.useState)(!1),[k,T]=(0,c.useState)(""),[R,N]=(0,c.useState)(!0),[D,F]=(0,c.useState)(!1),[M,U]=(0,c.useState)(!1),[O,j]=(0,c.useState)("closed"),[W,L]=(0,c.useState)(!1),[B,q]=(0,c.useState)(!1),z=(0,c.useCallback)(function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"chat";y(c=>[...c,{type:"user",content:e,id:t,timestamp:Date.now(),interactive:n,request:o}])},[]),G=(0,c.useCallback)((e,t,n,o)=>{y(c=>[...c,{type:"system",content:e,id:t,timestamp:Date.now(),interactive:!!n,interactiveData:n,isResponseSubmitted:o}])},[]),H=(0,c.useCallback)((e,t)=>{y(n=>[...n,{type:"error",content:e,id:t,timestamp:Date.now()}])},[]),J=(0,c.useCallback)(()=>{y([]),b(null)},[]),K=(0,c.useCallback)(e=>{b(t=>t?{...t,...e}:{complete:e.complete||!1,steps:e.steps||1,currentStep:e.currentStep||1})},[]),Q=(0,c.useCallback)(function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";_(e),T(t)},[]),V=(0,c.useCallback)(()=>{j("opening"),U(!0),q(!0),setTimeout(()=>{j("open")},a)},[a]),X=(0,c.useCallback)(()=>{j("closing"),setTimeout(()=>{U(!1),j("closed")},a)},[a]),Y=(0,c.useCallback)((e,t)=>{console.log("[ChatContext] Processing SSE event:",e,t);try{if("heartbeat"===e){P(Date.now());return}if("connected"===e&&(m("connected"),C(t.connectionId),p(0),P(Date.now())),"thinking"===e||"processing"===e){let e=t.content||"Thinking...";Q(!0,e)}else if("message"===e)!1!==t.complete&&(console.log("######## Processing completed"),Q(!1)),t.interactive?G(t.content,t.id,{interactive:!0,function:t.function,parameters:t.parameters}):G(t.content,t.id);else if("interactive"===e){var n,o,c,r;Q(!1);let e="";e="confirm"===t.function?(null===(n=t.parameters)||void 0===n?void 0:n.message)||"Confirm?":"select"===t.function?(null===(o=t.parameters)||void 0===o?void 0:o.question)||"Select an option:":"form"===t.function?(null===(c=t.parameters)||void 0===c?void 0:c.prompt)||"Please fill out this form:":"chat"===t.function?(null===(r=t.parameters)||void 0===r?void 0:r.question)||"What would you like to chat about?":"present"===t.function?"":"Interactive message",console.log("[ChatContext] Extracted content for interactive message:",e),console.log("[ChatContext] Full interactive message data:",t);let a="present"===t.function;G(e,t.messageId||t.id||"interactive-".concat(Date.now()),{interactive:!0,function:t.function,parameters:t.parameters},a)}else"task_update"===e?(K({complete:t.complete||!1,steps:t.steps||1,currentStep:t.currentStep||1}),t.complete&&setTimeout(()=>{J()},5e3)):"action"===e?console.log("[ChatContext] Action received:",t.actionType):"complete"===e&&(console.log("[ChatContext] Session completed:",t),G(t.content||"Session completed"),Q(!1),setTimeout(()=>{X(),ee()},2e3))}catch(e){console.error("[ChatContext] Error processing SSE event:",e),G("An error occurred processing the response. Please try again.")}},[Q,G,K,J]),Z=(0,c.useCallback)(async()=>{console.log("[ChatContext] Starting SSE connection...");try{if(f)return console.log("[ChatContext] Connection already in progress, skipping"),{connectionId:g};I(!0),m("reconnecting"),console.log("[ChatContext] Calling createChatStream");let{eventSource:e,connectionId:t}=await l.createChatStream((e,t)=>{console.log("[ChatContext] Received SSE event:",e,t),"connected"!==v&&(m("connected"),p(0)),Y(e,t)});return console.log("[ChatContext] createChatStream returned:",{eventSource:!!e,connectionId:t}),h(e),C(t),I(!1),m("connected"),{connectionId:t}}catch(e){return console.error("[ChatContext] Error establishing SSE connection:",e),I(!1),m("disconnected"),G("Error connecting to chat service. Please try again."),{connectionId:null}}},[f,g,v,Y,G]),$=(0,c.useCallback)(async()=>{"reconnecting"!==v&&await Z()},[Z,v]),ee=(0,c.useCallback)(()=>{d&&(console.log("[ChatContext] Terminating SSE connection"),l.terminateChatStream().catch(e=>{console.error("[ChatContext] Error terminating chat stream:",e)}),d.close(),h(null),C(null),m("disconnected")),J()},[d,J]),et=(0,c.useCallback)(async(e,t,n)=>{z(e,void 0,!1,"chat"),F(!0);let o=g,c=!1,r=async()=>{m("reconnecting"),C(null),d&&(d.close(),h(null));let e=await Z();return P(Date.now()),e.connectionId},a=Date.now();if((!E||a-E>45e3)&&(console.log("[ChatContext] No recent heartbeat, reconnecting before sending message"),!(o=await r()))){F(!1),G("Failed to reconnect before sending message.");return}for(let a=0;a<2;a++)try{let a=await l.sendMessage({type:null!=t?t:"chat",context:n,content:e,connectionId:null!=o?o:void 0,currentPage:window.location.pathname});if(F(!1),a&&"error"!==a.type&&P(Date.now()),"error"===a.type){if(c)G("Connection lost. Please click the reconnect button to continue chatting.");else{console.log("[ChatContext] Error response, reconnecting and retrying message"),o=await r(),c=!0;continue}}return}catch(e){if(F(!1),e&&e.response&&404===e.response.status){if(c){G("Connection lost. Please click the reconnect button to continue chatting.");return}console.log("[ChatContext] 404 error (exception), reconnecting and retrying message"),o=await r(),c=!0;continue}console.error("[ChatContext] Error sending message:",e),G("Sorry, there was an error sending your message. Please use the reconnect button to try again.");return}},[g,Z,z,G,F,d,E]),en=(0,c.useCallback)((e,t)=>{V(),J(),"disconnected"===v&&(console.log("[ChatContext] Connection is disconnected, resetting connection state before sending message"),C(null),h(null),m("reconnecting"),J()),et(e,"new_chat",t)},[V,et,v,C,h,m,J]),eo=(0,c.useCallback)(function(e,t){var n,o;let c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"general";console.log("[ChatContext] Handling interactive response for message ID:",e,"response:",t),y(n=>n.map(n=>n.id===e?{...n,isResponseSubmitted:!0,responseValue:t}:n));let r="";if("boolean"==typeof t){let n=A.find(t=>t.id===e);if((null==n?void 0:null===(o=n.interactiveData)||void 0===o?void 0:o.function)==="confirm"){let e=n.interactiveData.parameters;r=t?e.yesPrompt:e.noPrompt}else r=t?"Yes":"No"}else r="string"==typeof t?t:"object"==typeof t?"Form submitted":String(t);let a=A.find(t=>t.id===e),i=null==a?void 0:null===(n=a.interactiveData)||void 0===n?void 0:n.function;if(z(r,"response-".concat(e),!0,i||"chat"),g){let n=(e.startsWith("interactive-"),e);console.log("[ChatContext] Sending interactive response with messageId:",n),l.sendMessage({type:"interactive_response",context:c,content:JSON.stringify({messageId:n,response:t}),connectionId:g}).catch(e=>{console.error("[ChatContext] Error sending interactive response:",e),H("Failed to send your response. Please try again.")})}},[g,z,H,A]);return(0,c.useEffect)(()=>{B&&"disconnected"===v&&!f?(console.log("[ChatContext] Auto-connecting because isActive is true"),Z().catch(e=>{console.error("[ChatContext] Error initializing connection:",e)})):B||"disconnected"===v||(console.log("[ChatContext] Terminating connection because isActive is false"),ee())},[B,v,f,Z,ee]),(0,c.useEffect)(()=>{let e=null;return"disconnected"===v&&S<n&&B&&(console.log("[ChatContext] Attempting automatic reconnection (attempt ".concat(S+1,"/").concat(n,")")),e=setTimeout(()=>{$(),p(e=>e+1)},Math.min(1e3*Math.pow(2,S),3e4))),()=>{e&&clearTimeout(e)}},[v,S,n,B,$]),(0,c.useEffect)(()=>{let e=e=>{var t;(null===(t=e.detail)||void 0===t?void 0:t.message)&&en(e.detail.message,e.detail.contextType)};return window.addEventListener("triggerChatBubble",e),()=>{window.removeEventListener("triggerChatBubble",e)}},[en]),(0,c.useEffect)(()=>{("open"===O||"closed"===O)&&L(!1)},[O]),(0,c.useEffect)(()=>()=>{d&&(console.log("#### Terminating connection due to eventSource unmount"),ee())},[]),(0,o.jsx)(u.Provider,{value:{connectionId:g,connectionStatus:v,reconnectAttempts:S,MAX_AUTO_RECONNECT_ATTEMPTS:n,chatHistory:A,currentTask:w,isProcessing:x,processingHint:k,showInputForm:R,isSending:D,isExpanded:M,animationState:O,isUserInitiated:W,isActive:B,setIsUserInitiated:L,connectToSSE:Z,handleReconnect:$,terminateConnection:ee,addUserMessage:z,addSystemMessage:G,addErrorMessage:H,clearChatHistory:J,updateTask:K,setProcessing:Q,handleInteractiveResponse:eo,sendMessage:et,expandChat:V,minimizeChat:X,handleChatTrigger:en},children:t})}function h(){let e=(0,c.useContext)(u);if(null===e)throw Error("useChat must be used within a ChatProvider");return e}}}]);